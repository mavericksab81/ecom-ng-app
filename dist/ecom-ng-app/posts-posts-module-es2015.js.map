{"version":3,"sources":["./src/app/posts/add-post/add-post.component.ts","./src/app/posts/add-post/add-post.component.html","./src/app/posts/edit-post/edit-post.component.ts","./src/app/posts/edit-post/edit-post.component.html","./src/app/posts/posts-list/posts-list.component.ts","./src/app/posts/posts-list/posts-list.component.html","./src/app/posts/posts.module.ts","./src/app/posts/state/posts.actions.ts","./src/app/posts/state/posts.effects.ts","./src/app/posts/state/posts.reducer.ts","./src/app/services/posts.service.ts"],"names":[],"mappings":"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","file":"posts-posts-module-es2015.js","sourcesContent":["import { addPost } from './../state/posts.actions';\nimport { Post } from './../../models/posts.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\n\n@Component({\n  selector: 'app-add-post',\n  templateUrl: './add-post.component.html',\n  styleUrls: ['./add-post.component.css'],\n})\nexport class AddPostComponent implements OnInit {\n  postForm: FormGroup;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.postForm = new FormGroup({\n      title: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(6),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n    });\n  }\n\n  showDescriptionErrors() {\n    const descriptionForm = this.postForm.get('description');\n    if (descriptionForm.touched && !descriptionForm.valid) {\n      if (descriptionForm.errors.required) {\n        return 'Description is required';\n      }\n\n      if (descriptionForm.errors.minlength) {\n        return 'Description should be of minimum 10 characters length';\n      }\n    }\n  }\n\n  onAddPost() {\n    if (!this.postForm.valid) {\n      return;\n    }\n\n    const post: Post = {\n      title: this.postForm.value.title,\n      description: this.postForm.value.description,\n    };\n\n    this.store.dispatch(addPost({ post }));\n  }\n}\n","<div class=\"row my-4\">\n  <div class=\"col-md-12\">\n    <h3>Add Post</h3>\n    <hr />\n    <form [formGroup]=\"postForm\" (ngSubmit)=\"onAddPost()\">\n      <div class=\"mb-3\">\n        <label>Title</label>\n        <input type=\"text\" class=\"form-control\" formControlName=\"title\" />\n\n        <div\n          *ngIf=\"postForm.get('title').touched && !postForm.get('title').valid\"\n        >\n          <div *ngIf=\"postForm.get('title').errors.required\">\n            Title is required\n          </div>\n          <div *ngIf=\"postForm.get('title').errors.minlength\">\n            Title should be minimum 6 characters\n          </div>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        <label>Description</label>\n        <textarea class=\"form-control\" formControlName=\"description\"></textarea>\n        <div>{{ showDescriptionErrors() }}</div>\n      </div>\n\n      <div class=\"my-3\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          [disabled]=\"!postForm.valid\"\n        >\n          Add Post\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { updatePost } from './../state/posts.actions';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Post } from './../../models/posts.model';\nimport { getPostById } from './../state/posts.selector';\nimport { AppState } from './../../store/app.state';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-edit-post',\n  templateUrl: './edit-post.component.html',\n  styleUrls: ['./edit-post.component.css'],\n})\nexport class EditPostComponent implements OnInit, OnDestroy {\n  post: Post;\n  postForm: FormGroup;\n  postSubscription: Subscription;\n  constructor(private store: Store<AppState>, private router: Router) {}\n\n  ngOnInit(): void {\n    this.createForm();\n    this.store.select(getPostById).subscribe((post) => {\n      if (post) {\n        this.post = post;\n        this.postForm.patchValue({\n          title: post.title,\n          description: post.description,\n        });\n      }\n    });\n  }\n\n  createForm() {\n    this.postForm = new FormGroup({\n      title: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(6),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n    });\n  }\n\n  onSubmit() {\n    if (!this.postForm.valid) {\n      return;\n    }\n\n    const title = this.postForm.value.title;\n    const description = this.postForm.value.description;\n\n    const post: Post = {\n      id: this.post.id,\n      title,\n      description,\n    };\n\n    //dispatch the action\n    this.store.dispatch(updatePost({ post }));\n    this.router.navigate(['posts']);\n  }\n\n  ngOnDestroy() {\n    if (this.postSubscription) {\n      this.postSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <h3>Update Post</h3>\n    <hr />\n\n    <form [formGroup]=\"postForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"mb-3\">\n        <label>Title</label>\n        <input type=\"text\" class=\"form-control\" formControlName=\"title\" />\n        <div\n          *ngIf=\"postForm.get('title').touched && !postForm.get('title').valid\"\n        >\n          <div *ngIf=\"postForm.get('title').errors.required\">\n            Title is required\n          </div>\n          <div *ngIf=\"postForm.get('title').errors.minlength\">\n            Title should be minimum 6 characters\n          </div>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        <label>Description</label>\n        <textarea class=\"form-control\" formControlName=\"description\"></textarea>\n        <div\n          *ngIf=\"\n            postForm.get('description').touched &&\n            !postForm.get('description').valid\n          \"\n        >\n          <div *ngIf=\"postForm.get('description').errors.required\">\n            Description is required\n          </div>\n          <div *ngIf=\"postForm.get('description').errors.minlength\">\n            Description should be minimum 10 characters\n          </div>\n        </div>\n      </div>\n\n      <div class=\"my-3\">\n        <button type=\"submit\" class=\"btn btn-primary\">Update Post</button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { getPosts, getCount } from './../state/posts.selector';\nimport { Post } from './../../models/posts.model';\nimport { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\nimport { deletePost, loadPosts } from '../state/posts.actions';\n\n@Component({\n  selector: 'app-posts-list',\n  templateUrl: './posts-list.component.html',\n  styleUrls: ['./posts-list.component.css'],\n})\nexport class PostsListComponent implements OnInit {\n  posts: Observable<Post[]>;\n  count: Observable<number>;\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.posts = this.store.select(getPosts);\n    this.count = this.store.select(getCount);\n    this.store.dispatch(loadPosts());\n  }\n\n  onDeletePost(id: string) {\n    if (confirm('Are you sure you want to delete')) {\n      this.store.dispatch(deletePost({ id }));\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-8\">\n    <h3>Posts List ({{ count | async }})</h3>\n\n    <div>\n      <a href=\"#\" class=\"btn btn-primary\" [routerLink]=\"['/posts/add']\"\n        >Add Post</a\n      >\n    </div>\n\n    <table class=\"table table-striped\" *ngIf=\"posts | async as postsData\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Title</th>\n          <th>Description</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let post of postsData\">\n          <td>{{ post.id }}</td>\n          <td style=\"word-break: break-all\">{{ post.title }}</td>\n          <td style=\"word-break: break-all\">{{ post.description }}</td>\n          <td>\n            <a href=\"\" class=\"btn btn-primary\" [routerLink]=\"['edit', post.id]\"\n              >Update </a\n            >&nbsp;\n            <button class=\"btn btn-danger\" (click)=\"onDeletePost(post.id)\">\n              Delete</button\n            >&nbsp;\n            <a href=\"\" class=\"btn btn-info\" [routerLink]=\"['details', post.id]\"\n              >Details\n            </a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div class=\"col-md-4\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { PostsEffects } from './state/posts.effects';\nimport { EffectsModule } from '@ngrx/effects';\nimport { POST_STATE_NAME } from './state/posts.selector';\nimport { EditPostComponent } from './edit-post/edit-post.component';\nimport { AddPostComponent } from './add-post/add-post.component';\nimport { PostsListComponent } from './posts-list/posts-list.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { postsReducer } from './state/posts.reducer';\nimport { SinglePostComponent } from './single-post/single-post.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PostsListComponent,\n    children: [\n      { path: 'add', component: AddPostComponent },\n      {\n        path: 'edit/:id',\n        component: EditPostComponent,\n      },\n    ],\n  },\n];\n@NgModule({\n  declarations: [PostsListComponent, AddPostComponent, EditPostComponent, SinglePostComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes),\n    StoreModule.forFeature(POST_STATE_NAME, postsReducer),\n    EffectsModule.forFeature([PostsEffects]),\n  ],\n})\nexport class PostsModule {}\n","import { Update } from '@ngrx/entity';\nimport { Post } from './../../models/posts.model';\nimport { createAction, props } from '@ngrx/store';\n\nexport const ADD_POST_ACTION = '[posts page] add post';\nexport const ADD_POST_SUCCESS = '[posts page] add post success';\nexport const UPDATE_POST_ACTION = '[posts page] update post';\nexport const UPDATE_POST_SUCCESS = '[posts page] update post success';\nexport const DELETE_POST_ACTION = '[posts page] delete post';\nexport const DELETE_POST_SUCCESS = '[posts page] delete post success';\nexport const LOAD_POSTS = '[posts page] load posts';\nexport const LOAD_POSTS_SUCCESS = '[posts page] load posts success';\n\nexport const addPost = createAction(ADD_POST_ACTION, props<{ post: Post }>());\nexport const addPostSuccess = createAction(\n  ADD_POST_SUCCESS,\n  props<{ post: Post }>()\n);\nexport const updatePost = createAction(\n  UPDATE_POST_ACTION,\n  props<{ post: Post }>()\n);\n\nexport const updatePostSuccess = createAction(\n  UPDATE_POST_SUCCESS,\n  props<{ post: Update<Post> }>()\n);\n\nexport const deletePost = createAction(\n  DELETE_POST_ACTION,\n  props<{ id: string }>()\n);\nexport const deletePostSuccess = createAction(\n  DELETE_POST_SUCCESS,\n  props<{ id: string }>()\n);\n\nexport const loadPosts = createAction(LOAD_POSTS);\nexport const loadPostsSuccess = createAction(\n  LOAD_POSTS_SUCCESS,\n  props<{ posts: Post[] }>()\n);\n","import { AppState } from './../../store/app.state';\nimport { getPosts } from './posts.selector';\nimport { Store } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\nimport { Post } from './../../models/posts.model';\nimport {\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  addPost,\n  addPostSuccess,\n  deletePost,\n  deletePostSuccess,\n  loadPosts,\n  loadPostsSuccess,\n  updatePost,\n  updatePostSuccess,\n} from './posts.actions';\nimport { PostsService } from './../../services/posts.service';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\nimport {\n  RouterNavigatedAction,\n  routerNavigationAction,\n  ROUTER_NAVIGATION,\n} from '@ngrx/router-store';\nimport { of } from 'rxjs';\nimport { dummyAction } from 'src/app/auth/state/auth.actions';\n\n@Injectable()\nexport class PostsEffects {\n  constructor(\n    private actions$: Actions,\n    private postsService: PostsService,\n    private store: Store<AppState>\n  ) {}\n\n  loadPosts$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(loadPosts),\n      withLatestFrom(this.store.select(getPosts)),\n      mergeMap(([action, posts]) => {\n        if (!posts.length || posts.length === 1) {\n          return this.postsService.getPosts().pipe(\n            map((posts) => {\n              return loadPostsSuccess({ posts });\n            })\n          );\n        }\n        return of(dummyAction());\n      })\n    );\n  });\n\n  addPost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(addPost),\n      mergeMap((action) => {\n        return this.postsService.addPost(action.post).pipe(\n          map((data) => {\n            const post = { ...action.post, id: data.name };\n            return addPostSuccess({ post });\n          })\n        );\n      })\n    );\n  });\n\n  updatePost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(updatePost),\n      switchMap((action) => {\n        return this.postsService.updatePost(action.post).pipe(\n          map((data) => {\n            const updatedPost: Update<Post> = {\n              id: action.post.id,\n              changes: {\n                ...action.post,\n              },\n            };\n            return updatePostSuccess({ post: updatedPost });\n          })\n        );\n      })\n    );\n  });\n  deletePost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(deletePost),\n      switchMap((action) => {\n        return this.postsService.deletePost(action.id).pipe(\n          map((data) => {\n            return deletePostSuccess({ id: action.id });\n          })\n        );\n      })\n    );\n  });\n\n  getSinglePost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ROUTER_NAVIGATION),\n      filter((r: RouterNavigatedAction) => {\n        return r.payload.routerState.url.startsWith('/posts/details');\n      }),\n      map((r: RouterNavigatedAction) => {\n        return r.payload.routerState['params']['id'];\n      }),\n      withLatestFrom(this.store.select(getPosts)),\n      switchMap(([id, posts]) => {\n        if (!posts.length) {\n          return this.postsService.getPostById(id).pipe(\n            map((post) => {\n              const postData = [{ ...post, id }];\n              return loadPostsSuccess({ posts: postData });\n            })\n          );\n        }\n        return of(dummyAction());\n      })\n    );\n  });\n}\n","import {\n  deletePost,\n  updatePost,\n  loadPostsSuccess,\n  addPostSuccess,\n  updatePostSuccess,\n  deletePostSuccess,\n} from './posts.actions';\nimport { createReducer, on } from '@ngrx/store';\nimport { initialState, postsAdapter } from './posts.state';\n\nconst _postsReducer = createReducer(\n  initialState,\n  on(addPostSuccess, (state, action) => {\n    return postsAdapter.addOne(action.post, {\n      ...state,\n      count: state.count + 1,\n    });\n  }),\n  on(updatePostSuccess, (state, action) => {\n    return postsAdapter.updateOne(action.post, state);\n  }),\n  on(deletePostSuccess, (state, { id }) => {\n    return postsAdapter.removeOne(id, state);\n  }),\n  on(loadPostsSuccess, (state, action) => {\n    return postsAdapter.setAll(action.posts, {\n      ...state,\n      count: state.count + 1,\n    });\n  })\n);\n\nexport function postsReducer(state, action) {\n  return _postsReducer(state, action);\n}\n","import { Post } from './../models/posts.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getPosts(): Observable<Post[]> {\n    return this.http\n      .get<Post[]>(`https://vue-completecourse.firebaseio.com/posts.json`)\n      .pipe(\n        map((data) => {\n          const posts: Post[] = [];\n          for (let key in data) {\n            posts.push({ ...data[key], id: key });\n          }\n          return posts;\n        })\n      );\n  }\n\n  addPost(post: Post): Observable<{ name: string }> {\n    return this.http.post<{ name: string }>(\n      `https://vue-completecourse.firebaseio.com/posts.json`,\n      post\n    );\n  }\n\n  updatePost(post: Post) {\n    const postData = {\n      [post.id]: { title: post.title, description: post.description },\n    };\n    return this.http.patch(\n      `https://vue-completecourse.firebaseio.com/posts.json`,\n      postData\n    );\n  }\n\n  deletePost(id: string) {\n    return this.http.delete(\n      `https://vue-completecourse.firebaseio.com/posts/${id}.json`\n    );\n  }\n\n  getPostById(id: string): Observable<Post> {\n    return this.http.get<Post>(\n      `https://vue-completecourse.firebaseio.com/posts/${id}.json`\n    );\n  }\n}\n"],"sourceRoot":"webpack:///"}