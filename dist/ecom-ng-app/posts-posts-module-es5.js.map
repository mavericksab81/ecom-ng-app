{"version":3,"sources":["webpack:///src/app/posts/add-post/add-post.component.ts","webpack:///src/app/posts/add-post/add-post.component.html","webpack:///src/app/posts/edit-post/edit-post.component.ts","webpack:///src/app/posts/edit-post/edit-post.component.html","webpack:///src/app/posts/posts-list/posts-list.component.ts","webpack:///src/app/posts/posts-list/posts-list.component.html","webpack:///src/app/posts/posts.module.ts","webpack:///src/app/posts/state/posts.actions.ts","webpack:///src/app/posts/state/posts.effects.ts","webpack:///src/app/posts/state/posts.reducer.ts","webpack:///src/app/services/posts.service.ts"],"names":["AddPostComponent","store","postForm","title","required","minLength","description","descriptionForm","get","touched","valid","errors","minlength","post","value","dispatch","onAddPost","selector","templateUrl","styleUrls","EditPostComponent","router","createForm","select","subscribe","patchValue","id","navigate","postSubscription","unsubscribe","onSubmit","PostsListComponent","posts","count","confirm","routes","path","component","children","PostsModule","forChild","forFeature","declarations","imports","ADD_POST_ACTION","ADD_POST_SUCCESS","UPDATE_POST_ACTION","UPDATE_POST_SUCCESS","DELETE_POST_ACTION","DELETE_POST_SUCCESS","LOAD_POSTS","LOAD_POSTS_SUCCESS","addPost","addPostSuccess","updatePost","updatePostSuccess","deletePost","deletePostSuccess","loadPosts","loadPostsSuccess","PostsEffects","actions$","postsService","loadPosts$","pipe","action","length","getPosts","addPost$","data","name","updatePost$","updatedPost","changes","deletePost$","getSinglePost$","r","payload","routerState","url","startsWith","getPostById","postData","_postsReducer","state","addOne","updateOne","removeOne","setAll","postsReducer","PostsService","http","key","push","patch","providedIn"],"mappings":"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","file":"posts-posts-module-es5.js","sourcesContent":["import { addPost } from './../state/posts.actions';\nimport { Post } from './../../models/posts.model';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\n\n@Component({\n  selector: 'app-add-post',\n  templateUrl: './add-post.component.html',\n  styleUrls: ['./add-post.component.css'],\n})\nexport class AddPostComponent implements OnInit {\n  postForm: FormGroup;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.postForm = new FormGroup({\n      title: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(6),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n    });\n  }\n\n  showDescriptionErrors() {\n    const descriptionForm = this.postForm.get('description');\n    if (descriptionForm.touched && !descriptionForm.valid) {\n      if (descriptionForm.errors.required) {\n        return 'Description is required';\n      }\n\n      if (descriptionForm.errors.minlength) {\n        return 'Description should be of minimum 10 characters length';\n      }\n    }\n  }\n\n  onAddPost() {\n    if (!this.postForm.valid) {\n      return;\n    }\n\n    const post: Post = {\n      title: this.postForm.value.title,\n      description: this.postForm.value.description,\n    };\n\n    this.store.dispatch(addPost({ post }));\n  }\n}\n","<div class=\"row my-4\">\n  <div class=\"col-md-12\">\n    <h3>Add Post</h3>\n    <hr />\n    <form [formGroup]=\"postForm\" (ngSubmit)=\"onAddPost()\">\n      <div class=\"mb-3\">\n        <label>Title</label>\n        <input type=\"text\" class=\"form-control\" formControlName=\"title\" />\n\n        <div\n          *ngIf=\"postForm.get('title').touched && !postForm.get('title').valid\"\n        >\n          <div *ngIf=\"postForm.get('title').errors.required\">\n            Title is required\n          </div>\n          <div *ngIf=\"postForm.get('title').errors.minlength\">\n            Title should be minimum 6 characters\n          </div>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        <label>Description</label>\n        <textarea class=\"form-control\" formControlName=\"description\"></textarea>\n        <div>{{ showDescriptionErrors() }}</div>\n      </div>\n\n      <div class=\"my-3\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          [disabled]=\"!postForm.valid\"\n        >\n          Add Post\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { updatePost } from './../state/posts.actions';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Post } from './../../models/posts.model';\nimport { getPostById } from './../state/posts.selector';\nimport { AppState } from './../../store/app.state';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-edit-post',\n  templateUrl: './edit-post.component.html',\n  styleUrls: ['./edit-post.component.css'],\n})\nexport class EditPostComponent implements OnInit, OnDestroy {\n  post: Post;\n  postForm: FormGroup;\n  postSubscription: Subscription;\n  constructor(private store: Store<AppState>, private router: Router) {}\n\n  ngOnInit(): void {\n    this.createForm();\n    this.store.select(getPostById).subscribe((post) => {\n      if (post) {\n        this.post = post;\n        this.postForm.patchValue({\n          title: post.title,\n          description: post.description,\n        });\n      }\n    });\n  }\n\n  createForm() {\n    this.postForm = new FormGroup({\n      title: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(6),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(10),\n      ]),\n    });\n  }\n\n  onSubmit() {\n    if (!this.postForm.valid) {\n      return;\n    }\n\n    const title = this.postForm.value.title;\n    const description = this.postForm.value.description;\n\n    const post: Post = {\n      id: this.post.id,\n      title,\n      description,\n    };\n\n    //dispatch the action\n    this.store.dispatch(updatePost({ post }));\n    this.router.navigate(['posts']);\n  }\n\n  ngOnDestroy() {\n    if (this.postSubscription) {\n      this.postSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <h3>Update Post</h3>\n    <hr />\n\n    <form [formGroup]=\"postForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"mb-3\">\n        <label>Title</label>\n        <input type=\"text\" class=\"form-control\" formControlName=\"title\" />\n        <div\n          *ngIf=\"postForm.get('title').touched && !postForm.get('title').valid\"\n        >\n          <div *ngIf=\"postForm.get('title').errors.required\">\n            Title is required\n          </div>\n          <div *ngIf=\"postForm.get('title').errors.minlength\">\n            Title should be minimum 6 characters\n          </div>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        <label>Description</label>\n        <textarea class=\"form-control\" formControlName=\"description\"></textarea>\n        <div\n          *ngIf=\"\n            postForm.get('description').touched &&\n            !postForm.get('description').valid\n          \"\n        >\n          <div *ngIf=\"postForm.get('description').errors.required\">\n            Description is required\n          </div>\n          <div *ngIf=\"postForm.get('description').errors.minlength\">\n            Description should be minimum 10 characters\n          </div>\n        </div>\n      </div>\n\n      <div class=\"my-3\">\n        <button type=\"submit\" class=\"btn btn-primary\">Update Post</button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { getPosts, getCount } from './../state/posts.selector';\nimport { Post } from './../../models/posts.model';\nimport { Observable } from 'rxjs';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\nimport { deletePost, loadPosts } from '../state/posts.actions';\n\n@Component({\n  selector: 'app-posts-list',\n  templateUrl: './posts-list.component.html',\n  styleUrls: ['./posts-list.component.css'],\n})\nexport class PostsListComponent implements OnInit {\n  posts: Observable<Post[]>;\n  count: Observable<number>;\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.posts = this.store.select(getPosts);\n    this.count = this.store.select(getCount);\n    this.store.dispatch(loadPosts());\n  }\n\n  onDeletePost(id: string) {\n    if (confirm('Are you sure you want to delete')) {\n      this.store.dispatch(deletePost({ id }));\n    }\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-8\">\n    <h3>Posts List ({{ count | async }})</h3>\n\n    <div>\n      <a href=\"#\" class=\"btn btn-primary\" [routerLink]=\"['/posts/add']\"\n        >Add Post</a\n      >\n    </div>\n\n    <table class=\"table table-striped\" *ngIf=\"posts | async as postsData\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Title</th>\n          <th>Description</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let post of postsData\">\n          <td>{{ post.id }}</td>\n          <td style=\"word-break: break-all\">{{ post.title }}</td>\n          <td style=\"word-break: break-all\">{{ post.description }}</td>\n          <td>\n            <a href=\"\" class=\"btn btn-primary\" [routerLink]=\"['edit', post.id]\"\n              >Update </a\n            >&nbsp;\n            <button class=\"btn btn-danger\" (click)=\"onDeletePost(post.id)\">\n              Delete</button\n            >&nbsp;\n            <a href=\"\" class=\"btn btn-info\" [routerLink]=\"['details', post.id]\"\n              >Details\n            </a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div class=\"col-md-4\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { PostsEffects } from './state/posts.effects';\nimport { EffectsModule } from '@ngrx/effects';\nimport { POST_STATE_NAME } from './state/posts.selector';\nimport { EditPostComponent } from './edit-post/edit-post.component';\nimport { AddPostComponent } from './add-post/add-post.component';\nimport { PostsListComponent } from './posts-list/posts-list.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { postsReducer } from './state/posts.reducer';\nimport { SinglePostComponent } from './single-post/single-post.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PostsListComponent,\n    children: [\n      { path: 'add', component: AddPostComponent },\n      {\n        path: 'edit/:id',\n        component: EditPostComponent,\n      },\n    ],\n  },\n];\n@NgModule({\n  declarations: [PostsListComponent, AddPostComponent, EditPostComponent, SinglePostComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes),\n    StoreModule.forFeature(POST_STATE_NAME, postsReducer),\n    EffectsModule.forFeature([PostsEffects]),\n  ],\n})\nexport class PostsModule {}\n","import { Update } from '@ngrx/entity';\nimport { Post } from './../../models/posts.model';\nimport { createAction, props } from '@ngrx/store';\n\nexport const ADD_POST_ACTION = '[posts page] add post';\nexport const ADD_POST_SUCCESS = '[posts page] add post success';\nexport const UPDATE_POST_ACTION = '[posts page] update post';\nexport const UPDATE_POST_SUCCESS = '[posts page] update post success';\nexport const DELETE_POST_ACTION = '[posts page] delete post';\nexport const DELETE_POST_SUCCESS = '[posts page] delete post success';\nexport const LOAD_POSTS = '[posts page] load posts';\nexport const LOAD_POSTS_SUCCESS = '[posts page] load posts success';\n\nexport const addPost = createAction(ADD_POST_ACTION, props<{ post: Post }>());\nexport const addPostSuccess = createAction(\n  ADD_POST_SUCCESS,\n  props<{ post: Post }>()\n);\nexport const updatePost = createAction(\n  UPDATE_POST_ACTION,\n  props<{ post: Post }>()\n);\n\nexport const updatePostSuccess = createAction(\n  UPDATE_POST_SUCCESS,\n  props<{ post: Update<Post> }>()\n);\n\nexport const deletePost = createAction(\n  DELETE_POST_ACTION,\n  props<{ id: string }>()\n);\nexport const deletePostSuccess = createAction(\n  DELETE_POST_SUCCESS,\n  props<{ id: string }>()\n);\n\nexport const loadPosts = createAction(LOAD_POSTS);\nexport const loadPostsSuccess = createAction(\n  LOAD_POSTS_SUCCESS,\n  props<{ posts: Post[] }>()\n);\n","import { AppState } from './../../store/app.state';\nimport { getPosts } from './posts.selector';\nimport { Store } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\nimport { Post } from './../../models/posts.model';\nimport {\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  addPost,\n  addPostSuccess,\n  deletePost,\n  deletePostSuccess,\n  loadPosts,\n  loadPostsSuccess,\n  updatePost,\n  updatePostSuccess,\n} from './posts.actions';\nimport { PostsService } from './../../services/posts.service';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\nimport {\n  RouterNavigatedAction,\n  routerNavigationAction,\n  ROUTER_NAVIGATION,\n} from '@ngrx/router-store';\nimport { of } from 'rxjs';\nimport { dummyAction } from 'src/app/auth/state/auth.actions';\n\n@Injectable()\nexport class PostsEffects {\n  constructor(\n    private actions$: Actions,\n    private postsService: PostsService,\n    private store: Store<AppState>\n  ) {}\n\n  loadPosts$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(loadPosts),\n      withLatestFrom(this.store.select(getPosts)),\n      mergeMap(([action, posts]) => {\n        if (!posts.length || posts.length === 1) {\n          return this.postsService.getPosts().pipe(\n            map((posts) => {\n              return loadPostsSuccess({ posts });\n            })\n          );\n        }\n        return of(dummyAction());\n      })\n    );\n  });\n\n  addPost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(addPost),\n      mergeMap((action) => {\n        return this.postsService.addPost(action.post).pipe(\n          map((data) => {\n            const post = { ...action.post, id: data.name };\n            return addPostSuccess({ post });\n          })\n        );\n      })\n    );\n  });\n\n  updatePost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(updatePost),\n      switchMap((action) => {\n        return this.postsService.updatePost(action.post).pipe(\n          map((data) => {\n            const updatedPost: Update<Post> = {\n              id: action.post.id,\n              changes: {\n                ...action.post,\n              },\n            };\n            return updatePostSuccess({ post: updatedPost });\n          })\n        );\n      })\n    );\n  });\n  deletePost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(deletePost),\n      switchMap((action) => {\n        return this.postsService.deletePost(action.id).pipe(\n          map((data) => {\n            return deletePostSuccess({ id: action.id });\n          })\n        );\n      })\n    );\n  });\n\n  getSinglePost$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ROUTER_NAVIGATION),\n      filter((r: RouterNavigatedAction) => {\n        return r.payload.routerState.url.startsWith('/posts/details');\n      }),\n      map((r: RouterNavigatedAction) => {\n        return r.payload.routerState['params']['id'];\n      }),\n      withLatestFrom(this.store.select(getPosts)),\n      switchMap(([id, posts]) => {\n        if (!posts.length) {\n          return this.postsService.getPostById(id).pipe(\n            map((post) => {\n              const postData = [{ ...post, id }];\n              return loadPostsSuccess({ posts: postData });\n            })\n          );\n        }\n        return of(dummyAction());\n      })\n    );\n  });\n}\n","import {\n  deletePost,\n  updatePost,\n  loadPostsSuccess,\n  addPostSuccess,\n  updatePostSuccess,\n  deletePostSuccess,\n} from './posts.actions';\nimport { createReducer, on } from '@ngrx/store';\nimport { initialState, postsAdapter } from './posts.state';\n\nconst _postsReducer = createReducer(\n  initialState,\n  on(addPostSuccess, (state, action) => {\n    return postsAdapter.addOne(action.post, {\n      ...state,\n      count: state.count + 1,\n    });\n  }),\n  on(updatePostSuccess, (state, action) => {\n    return postsAdapter.updateOne(action.post, state);\n  }),\n  on(deletePostSuccess, (state, { id }) => {\n    return postsAdapter.removeOne(id, state);\n  }),\n  on(loadPostsSuccess, (state, action) => {\n    return postsAdapter.setAll(action.posts, {\n      ...state,\n      count: state.count + 1,\n    });\n  })\n);\n\nexport function postsReducer(state, action) {\n  return _postsReducer(state, action);\n}\n","import { Post } from './../models/posts.model';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostsService {\n  constructor(private http: HttpClient) {}\n\n  getPosts(): Observable<Post[]> {\n    return this.http\n      .get<Post[]>(`https://vue-completecourse.firebaseio.com/posts.json`)\n      .pipe(\n        map((data) => {\n          const posts: Post[] = [];\n          for (let key in data) {\n            posts.push({ ...data[key], id: key });\n          }\n          return posts;\n        })\n      );\n  }\n\n  addPost(post: Post): Observable<{ name: string }> {\n    return this.http.post<{ name: string }>(\n      `https://vue-completecourse.firebaseio.com/posts.json`,\n      post\n    );\n  }\n\n  updatePost(post: Post) {\n    const postData = {\n      [post.id]: { title: post.title, description: post.description },\n    };\n    return this.http.patch(\n      `https://vue-completecourse.firebaseio.com/posts.json`,\n      postData\n    );\n  }\n\n  deletePost(id: string) {\n    return this.http.delete(\n      `https://vue-completecourse.firebaseio.com/posts/${id}.json`\n    );\n  }\n\n  getPostById(id: string): Observable<Post> {\n    return this.http.get<Post>(\n      `https://vue-completecourse.firebaseio.com/posts/${id}.json`\n    );\n  }\n}\n"]}